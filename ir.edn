{:package "app",
 :files {"comp.container" {:ns ["ns"
                                "app.comp.container"
                                [":require-macros" ["respo.macros" ":refer" ["defcomp"]]]
                                [":require"
                                 ["[]" "hsl.core" ":refer" ["[]" "hsl"]]
                                 ["[]" "respo-ui.style" ":as" "ui"]
                                 ["[]" "respo.alias" ":refer" ["[]" "create-comp" "div" "span"]]
                                 ["[]" "respo.comp.space" ":refer" ["[]" "comp-space"]]
                                 ["[]" "respo.comp.text" ":refer" ["[]" "comp-text"]]]],
                           :defs {"comp-container" ["defcomp"
                                                    "comp-container"
                                                    ["store"]
                                                    ["div"
                                                     ["{}" [":style" ["merge" "ui/global"]]]
                                                     ["comp-space" "|8px" "nil"]
                                                     ["div" ["{}" [":style" "ui/button"]] ["comp-text" "|Demo" "nil"]]]]},
                           :procs []},
         "main" {:ns ["ns"
                      "app.main"
                      [":require"
                       ["[]" "respo.core" ":refer" ["[]" "render!" "clear-cache!" "falsify-stage!" "render-element"]]
                       ["[]" "app.comp.container" ":refer" ["[]" "comp-container"]]
                       ["[]" "cljs.reader" ":refer" ["[]" "read-string"]]
                       ["[]" "app.updater.core" ":refer" ["[]" "updater"]]]],
                 :defs {"dispatch!" ["defn"
                                     "dispatch!"
                                     ["op" "op-data"]
                                     ["let"
                                      [["next-store" ["updater" "@*store" "op" "op-data"]]]
                                      ["reset!" "*store" "next-store"]]],
                        "on-jsload!" ["defn" "reload!" [] ["clear-cache!"] ["render-app!"] ["println" "|Code updated."]],
                        "render-app!" ["defn"
                                       "render-app!"
                                       []
                                       ["render!" ["comp-container" "@*store"] "mount-target" "dispatch!"]],
                        "*store" ["defonce" "*store" ["atom" ["{}" [":states" ["{}"]]]]],
                        "server-rendered?" ["def"
                                            "server-rendered?"
                                            ["some?" ["js/document.querySelector" "|meta#server-rendered"]]],
                        "main!" ["defn"
                                 "main!"
                                 []
                                 ["if"
                                  "server-rendered?"
                                  ["falsify-stage!"
                                   "mount-target"
                                   ["render-element" ["comp-container" "@*store"]]
                                   "dispatch!"]]
                                 ["render-app!"]
                                 ["add-watch" "*store" ":changes" "render-app!"]
                                 ["println" "|App started."]],
                        "mount-target" ["def" "mount-target" [".querySelector" "js/document" "|.app"]]},
                 :procs [["set!" [".-onload" "js/window"] "main!"]]},
         "updater.core" {:ns ["ns" "app.updater.core" [":require" ["[]" "respo.cursor" ":refer" ["[]" "mutate"]]]],
                         :defs {"updater" ["defn"
                                           "updater"
                                           ["store" "op" "op-data"]
                                           ["case"
                                            "op"
                                            [":states" ["update" "store" ":states" ["mutate" "op-data"]]]
                                            "store"]]},
                         :procs []},
         "render" {:ns ["ns"
                        "app.render"
                        [":require"
                         ["[]"
                          "respo.alias"
                          ":refer"
                          ["[]" "html" "head" "title" "script" "style" "meta'" "div" "link" "body"]]
                         ["[]" "respo.render.html" ":refer" ["[]" "make-html" "make-string"]]
                         ["[]" "app.comp.container" ":refer" ["[]" "comp-container"]]
                         ["[]" "|fs" ":refer" ["[]" "readFileSync" "writeFileSync"]]]],
                   :defs {"main!" ["defn"
                                   "main!"
                                   []
                                   ["if"
                                    ["=" "js/process.env.env" "|dev"]
                                    ["spit" "|target/index.html" ["generate-empty-html"]]
                                    ["spit" "|dist/index.html" ["generate-html"]]]],
                          "spit" ["defn"
                                  "spit"
                                  ["file-name" "content"]
                                  ["writeFileSync" "file-name" "content"]
                                  ["println" "|Wrote to:" "file-name"]],
                          "generate-empty-html" ["defn"
                                                 "generate-empty-html"
                                                 []
                                                 ["html-dsl"
                                                  ["{}"
                                                   [":build?" "false"]
                                                   [":main" "|/main.js"]
                                                   [":cljs-main" "|/browser/main.js"]]
                                                  "|"]],
                          "generate-html" ["defn"
                                           "generate-html"
                                           []
                                           ["let"
                                            [["tree" ["comp-container" ["{}"]]]
                                             ["html-content" ["make-string" "tree"]]
                                             ["resources"
                                              ["let"
                                               [["manifest" ["js/JSON.parse" ["slurp" "|dist/manifest.json"]]]]
                                               ["{}"
                                                [":build?" "true"]
                                                [":css" ["aget" "manifest" "|main.css"]]
                                                [":main" ["aget" "manifest" "|main.js"]]
                                                [":vendor" ["aget" "manifest" "|vendor.js"]]]]]]
                                            ["html-dsl" "resources" "html-content"]]],
                          "slurp" ["defn" "slurp" ["x"] ["readFileSync" "x" "|utf8"]],
                          "html-dsl" ["defn"
                                      "html-dsl"
                                      ["resources" "html-content"]
                                      ["make-html"
                                       ["html"
                                        ["{}"]
                                        ["head"
                                         ["{}"]
                                         ["title" ["{}" [":innerHTML" "|Stack Workflow"]]]
                                         ["link" ["{}" [":rel" "|icon"] [":type" "|image/png"] [":href" "icon-url"]]]
                                         ["link" ["{}" [":rel" "|manifest"] [":href" "|manifest.json"]]]
                                         ["meta'" ["{}" [":charset" "|utf8"]]]
                                         ["meta'"
                                          ["{}"
                                           [":name" "|viewport"]
                                           [":content" "|width=device-width, initial-scale=1"]]]
                                         ["if"
                                          [":build?" "resources"]
                                          ["meta'" ["{}" [":id" "|server-rendered"] [":type" "|text/edn"]]]]
                                         ["if"
                                          ["contains?" "resources" ":css"]
                                          ["link"
                                           ["{}"
                                            [":rel" "|stylesheet"]
                                            [":type" "|text/css"]
                                            [":href" [":css" "resources"]]]]]]
                                        ["body"
                                         ["{}"]
                                         ["div" ["{}" [":class-name" "|app"] [":innerHTML" "html-content"]]]
                                         ["if"
                                          [":build?" "resources"]
                                          ["script" ["{}" [":src" [":vendor" "resources"]]]]
                                          ["script" ["{}" [":src" [":cljs-main" "resources"]]]]]
                                         ["script" ["{}" [":src" [":main" "resources"]]]]]]]],
                          "icon-url" ["def" "icon-url" "|http://logo.mvc-works.org/mvc.png"]},
                   :procs [["main!"]]}}}
