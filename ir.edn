{:package "app",
 :root {:ns "main", :def "main!"},
 :files {"comp.container" {:ns ["ns"
                                "app.comp.container"
                                [":require-macros"
                                 ["[]" "respo.macros" ":refer" ["[]" "defcomp" "<>" "div" "button" "span"]]]
                                [":require"
                                 ["[]" "hsl.core" ":refer" ["[]" "hsl"]]
                                 ["[]" "respo-ui.style" ":as" "ui"]
                                 ["[]" "respo.core" ":refer" ["[]" "create-comp"]]
                                 ["[]" "respo.comp.space" ":refer" ["[]" "=<"]]]],
                           :defs {"comp-container" ["defcomp"
                                                    "comp-container"
                                                    ["store"]
                                                    ["div"
                                                     ["{}" [":style" ["merge" "ui/global" "ui/row"]]]
                                                     ["=<" "|8px" "nil"]
                                                     ["div"
                                                      ["{}"]
                                                      ["button"
                                                       ["{}"
                                                        [":style" "ui/button"]
                                                        [":inner-text" ["str" "|inc " [":data" "store"]]]
                                                        [":event" ["{}" [":click" "on-click"]]]]]]]],
                                  "on-click" ["defn" "on-click" ["e" "dispatch!"] ["dispatch!" ":inc" "nil"]]},
                           :procs []},
         "main" {:ns ["ns"
                      "app.main"
                      [":require"
                       ["[]" "respo.core" ":refer" ["[]" "render!" "clear-cache!" "realize-ssr!"]]
                       ["[]" "respo.cursor" ":refer" ["[]" "mutate"]]
                       ["[]" "app.comp.container" ":refer" ["[]" "comp-container"]]
                       ["[]" "cljs.reader" ":refer" ["[]" "read-string"]]
                       ["[]" "app.updater.core" ":refer" ["[]" "updater"]]
                       ["[]" "app.schema" ":as" "schema"]]],
                 :defs {"dispatch!" ["defn"
                                     "dispatch!"
                                     ["op" "op-data"]
                                     ["let"
                                      [["next-store"
                                        ["if"
                                         ["=" "op" ":states"]
                                         ["update" "@*store" ":states" ["mutate" "op-data"]]
                                         ["updater" "@*store" "op" "op-data"]]]]
                                      ["reset!" "*store" "next-store"]]],
                        "on-jsload!" ["defn"
                                      "reload!"
                                      []
                                      ["clear-cache!"]
                                      ["render-app!" "render!"]
                                      ["println" "|Code updated."]],
                        "render-app!" ["defn"
                                       "render-app!"
                                       ["renderer"]
                                       ["renderer" "mount-target" ["comp-container" "@*store"] "dispatch!"]],
                        "*store" ["defonce" "*store" ["atom" "schema/store"]],
                        "server-rendered?" ["def"
                                            "server-rendered?"
                                            ["some?" ["js/document.querySelector" "|meta.respo-ssr"]]],
                        "main!" ["defn"
                                 "main!"
                                 []
                                 ["if" "server-rendered?" ["render-app!" "realize-ssr!"]]
                                 ["render-app!" "render!"]
                                 ["add-watch" "*store" ":changes" ["fn" [] ["render-app!" "render!"]]]
                                 ["println" "|App started."]],
                        "mount-target" ["def" "mount-target" [".querySelector" "js/document" "|.app"]]},
                 :procs [["set!" [".-onload" "js/window"] "main!"]]},
         "updater.core" {:ns ["ns" "app.updater.core"],
                         :defs {"updater" ["defn"
                                           "updater"
                                           ["store" "op" "op-data"]
                                           ["case" "op" [":inc" ["update" "store" ":data" "inc"]] "store"]]},
                         :procs []},
         "render" {:ns ["ns"
                        "app.render"
                        [":require"
                         ["[]" "respo.render.html" ":refer" ["[]" "make-string"]]
                         ["[]" "shell-page.core" ":refer" ["[]" "make-page" "spit" "slurp"]]
                         ["[]" "app.comp.container" ":refer" ["[]" "comp-container"]]
                         ["[]" "app.schema" ":as" "schema"]]],
                   :defs {"main!" ["defn"
                                   "main!"
                                   []
                                   ["if"
                                    ["=" "js/process.env.env" "|dev"]
                                    ["spit" "|target/index.html" ["dev-page"]]
                                    ["spit" "|dist/index.html" ["prod-page"]]]],
                          "base-info" ["def"
                                       "base-info"
                                       ["{}"
                                        [":title" "|Stack Workflow"]
                                        [":icon" "|http://logo.mvc-works.org/mvc.png"]
                                        [":ssr" "nil"]
                                        [":inner-html" "nil"]]],
                          "dev-page" ["defn"
                                      "dev-page"
                                      []
                                      ["make-page"
                                       "|"
                                       ["merge"
                                        "base-info"
                                        ["{}" [":styles" ["[]"]] [":scripts" ["[]" "|/main.js" "|/browser/main.js"]]]]]],
                          "prod-page" ["defn"
                                       "prod-page"
                                       []
                                       ["let"
                                        [["html-content" ["make-string" ["comp-container" "schema/store"]]]
                                         ["manifest" [".parse" "js/JSON" ["slurp" "|dist/manifest.json"]]]]
                                        ["make-page"
                                         "html-content"
                                         ["merge"
                                          "base-info"
                                          ["{}"
                                           [":styles" ["[]" ["aget" "manifest" "|main.css"]]]
                                           [":scripts"
                                            ["[]" ["aget" "manifest" "|vendor.js"] ["aget" "manifest" "|main.js"]]]]]]]]},
                   :procs []},
         "schema" {:ns ["ns" "app.schema"],
                   :defs {"store" ["def" "store" ["{}" [":states" ["{}"]] [":data" "0"]]]},
                   :procs []}}}
